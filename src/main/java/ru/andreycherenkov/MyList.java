package ru.andreycherenkov;

import java.util.Comparator;

/**
 *
 * Интерфейс MyList представляет собой интерфейс для списка элементов,
 * поддерживающий различные операции добавления, доступа, удаления и сортировки.
 * Этот интерфейс позволяет работать с элементами списка обобщенного типа T.
 *
 * @param <T> тип элементов, хранимых в коллекции
 *
 * @author Андрей Черенков
 */
public interface MyList<T> {

    /**
     * Добавляет элемент в конец списка.
     * @param element элемент, который необходимо добавить
     */
    void add(T element);

    /**
     * Добавляет элемент по указанному индексу в списке.
     * @param index индекс, по которому нужно добавить элемент
     * @param element элемент, который необходимо добавить
     */
    void add(int index, T element);

    /**
     * Возвращает элемент списка по указанному индексу.
     * @param index индекс элемента, который нужно вернуть
     * @return элемент списка по указанному индексу
     */
    T get(int index);

    /**
     * Возвращает количество элементов в списке.
     * @return количество элементов в списке
     */
    int size();

    /**
     * Возвращает индекс первого вхождения указанного элемента в список.
     * @param element элемент, индекс которого нужно найти
     * @return индекс первого вхождения указанного элемента; -1, если элемент не найден
     */
    int indexOf(T element);

    /**
     * Удаляет указанный элемент из списка.
     * @param element элемент, который необходимо удалить
     * @return true, если элемент был успешно удален; false, если элемент не найден
     */
    boolean remove(T element);

    /**
     * Удаляет элемент из списка по указанному индексу.
     * @param index индекс элемента, который необходимо удалить
     */
    void remove(int index);

    /**
     * Заменяет элемент в списке по указанному индексу.
     * @param index индекс элемента, который нужно заменить
     * @param element новый элемент, который заменит существующий
     */
    void set(int index, T element);

    /**
     * Очищает список, удаляя все его элементы.
     */
    void clear();

    /**
     * Сортирует список методом быстрой сортировки без компаратора.
     */
    void quickSort();

    /**
     * Сортирует список методом быстрой сортировки с использованием компаратора.
     * @param comparator компаратор для сравнения элементов списка
     */
    void quickSort(Comparator<? super T> comparator);

    /**
     * Проверяет, содержит ли список указанный элемент.
     * @param element элемент, наличие которого нужно проверить
     * @return true, если список содержит указанный элемент; false в противном случае
     */
    boolean contains(T element);
}
